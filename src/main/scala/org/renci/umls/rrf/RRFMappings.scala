package org.renci.umls.rrf

import java.io.File

/** Represents a single mapping entry. */
case class UMLSMapping(
  mapSet: String,       // MAPSETCUI	Unique identifier for the UMLS concept which represents the whole map set.
  mapSetSource: String, // MAPSETSAB	Source abbreviation (SAB) for the provider of the map set.
  mapSubsetId: String,  // MAPSUBSETID	Map subset identifier used to identify a subset of related mappings within a map set. This is used for cases where the FROMEXPR may have more than one potential mapping (optional).
  mapRank: String,      // MAPRANK	Order in which mappings in a subset should be applied. Used only where MAPSUBSETID is used. (optional)
  mapId: String,        // MAPID	Unique identifier for this individual mapping. Primary key of this table to identify a particular row.
  mapSourceId: String,  // MAPSID	Source asserted identifier for this mapping (optional).
  fromId: String,       // FROMID	Identifier for the entity being mapped from. This is an internal UMLS identifier used to point to an external entity in a source vocabulary (represented by the FROMEXPR). When the source provides such an identifier, it is reused here. Otherwise, it is generated by NLM. The FROMID is only unique within a map set. It is not a pointer to UMLS entities like atoms or concepts. There is a one-to-one correlation between FROMID and a unique set of values in FROMSID, FROMEXPR, FROMTYPE, FROMRULE, and FROMRES within a map set.
  fromSourceId: String, // FROMSID	Source asserted identifier for the entity being mapped from (optional).
  fromExpr: String,     // FROMEXPR	Entity being mapped from - can be a single code/identifier /concept name or a complex expression involving multiple codes/identifiers/concept names, Boolean operators and/or punctuation
  fromType: String,     // FROMTYPE	Type of entity being mapped from.
  fromRule: String,     // FROMRULE	Machine processable rule applicable to the entity being mapped from (optional)
  fromRestriction: String, // FROMRES	Restriction applicable to the entity being mapped from (optional).
  relationship: String, // REL	Relationship of the entity being mapped from to the entity being mapped to.
  relationshipAdditionalLabel: String, // RELA	Additional relationship label (optional).
  toId: String,         // TOID	Identifier for the entity being mapped to. This is an internal identifier used to point to an external entity in a source vocabulary (represented by the TOEXPR). When the source provides such an identifier, it is reused here. Otherwise, it is generated by NLM. The TOID is only unique within a map set. It is not a pointer to UMLS entities like atoms or concepts. There is a one-to-one correlation between TOID and a unique set of values in TOSID, TOEXPR, TOTYPE, TORULE, TORES within a map set.
  toSourceId: String,   // TOSID	Source asserted identifier for the entity being mapped to (optional).
  toExpr: String,       // TOEXPR	Entity being mapped to - can be a single code/identifier/concept name or a complex expression involving multiple codes/identifiers/concept names, Boolean operators and/or punctuation.
  toType: String,       // TOTYPE	Type of entity being mapped to.
  toRule: String,       // TORULE	Machine processable rule applicable to the entity being mapped to (optional).
  toRestriction: String, // TORES	Restriction applicable to the entity being mapped to (optional).
  mapRule: String,      // MAPRULE	Machine processable rule applicable to this mapping (optional).
  mapRestriction: String, // MAPRES	Restriction applicable to this mapping (optional).
  mapType: String,      // MAPTYPE	Type of mapping (optional).
  mapAttributeName: String, // MAPATN	The name of the attribute associated with this mapping [not yet in use]
  mapAttributeValue: String, // MAPATV	The value of the attribute associated with this mapping [not yet in use]
  contentViewFlag: String // CVF	The Content View Flag is a bit field used to indicate membership in a content view.
)

/**
  * The RRFMappings file allows you to read concept data from MRMAP.RRF.
  */
class RRFMappings(file: File, filename: String = "MRMAP.RRF") extends RRFFile(file, filename) {
  /** A list of all columns in an RRFMappings file. */
  def concepts(): Seq[UMLSMapping] = {
    // We'll just hard-code this for now.
    // Eventually, it'd be nice to have this automatically settable from MRFILES.RRF itself, but
    // right now I just don't have the time.
    rows.map(arr => UMLSMapping(
      arr(0),
      arr(1),
      arr(2),
      arr(3),
      arr(4),
      arr(5),
      arr(6),
      arr(7),
      arr(8),
      arr(9),
      arr(10),
      arr(12),
      arr(13),
      arr(14),
      arr(15),
      arr(16),
      arr(17),
      arr(18),
      arr(19),
      arr(20),
      arr(21),
      arr(22),
      arr(23),
      arr(24),
      arr(25),
      arr(26)
    ))
  }
}

object RRFMappings {
  /** Wrap an RRF file as an RRFCols. */
  def fromRRF(rrfFile: RRFFile) = new RRFMappings(rrfFile.file, rrfFile.filename)
}